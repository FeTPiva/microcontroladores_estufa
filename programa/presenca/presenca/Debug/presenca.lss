
presenca.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b34  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00400b34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  20000434  00400f68  00020434  2**2
                  ALLOC
  3 .stack        00003004  200004ec  00401020  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  6 .debug_info   000091f8  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001459  00000000  00000000  000296af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002129  00000000  00000000  0002ab08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004d0  00000000  00000000  0002cc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000480  00000000  00000000  0002d101  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003d19  00000000  00000000  0002d581  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006333  00000000  00000000  0003129a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00057bf3  00000000  00000000  000375cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b60  00000000  00000000  0008f1c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 34 00 20 cd 06 40 00 c9 06 40 00 c9 06 40 00     .4. ..@...@...@.
  400010:	c9 06 40 00 c9 06 40 00 c9 06 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c9 06 40 00 c9 06 40 00 00 00 00 00 c9 06 40 00     ..@...@.......@.
  40003c:	c9 06 40 00 c9 06 40 00 c9 06 40 00 c9 06 40 00     ..@...@...@...@.
  40004c:	c9 06 40 00 c9 06 40 00 c9 06 40 00 c9 06 40 00     ..@...@...@...@.
  40005c:	c9 06 40 00 c9 06 40 00 c9 06 40 00 00 00 00 00     ..@...@...@.....
  40006c:	51 05 40 00 65 05 40 00 79 05 40 00 c9 06 40 00     Q.@.e.@.y.@...@.
  40007c:	c9 06 40 00 00 00 00 00 00 00 00 00 c9 06 40 00     ..@...........@.
  40008c:	c9 06 40 00 c9 06 40 00 c9 06 40 00 c9 06 40 00     ..@...@...@...@.
  40009c:	c9 06 40 00 c9 06 40 00 c9 06 40 00 c9 06 40 00     ..@...@...@...@.
  4000ac:	c9 06 40 00 c9 06 40 00 c9 06 40 00 c9 06 40 00     ..@...@...@...@.
  4000bc:	c9 06 40 00 c9 06 40 00 c9 06 40 00 c9 06 40 00     ..@...@...@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000434 	.word	0x20000434
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400b34 	.word	0x00400b34

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00400b34 	.word	0x00400b34
  40012c:	20000438 	.word	0x20000438
  400130:	00400b34 	.word	0x00400b34
  400134:	00000000 	.word	0x00000000

00400138 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400138:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40013a:	480e      	ldr	r0, [pc, #56]	; (400174 <sysclk_init+0x3c>)
  40013c:	4b0e      	ldr	r3, [pc, #56]	; (400178 <sysclk_init+0x40>)
  40013e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400140:	213e      	movs	r1, #62	; 0x3e
  400142:	2000      	movs	r0, #0
  400144:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x44>)
  400146:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400148:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x48>)
  40014a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40014c:	2800      	cmp	r0, #0
  40014e:	d0fc      	beq.n	40014a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400150:	4b0c      	ldr	r3, [pc, #48]	; (400184 <sysclk_init+0x4c>)
  400152:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400154:	4a0c      	ldr	r2, [pc, #48]	; (400188 <sysclk_init+0x50>)
  400156:	4b0d      	ldr	r3, [pc, #52]	; (40018c <sysclk_init+0x54>)
  400158:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40015a:	4c0d      	ldr	r4, [pc, #52]	; (400190 <sysclk_init+0x58>)
  40015c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40015e:	2800      	cmp	r0, #0
  400160:	d0fc      	beq.n	40015c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400162:	2010      	movs	r0, #16
  400164:	4b0b      	ldr	r3, [pc, #44]	; (400194 <sysclk_init+0x5c>)
  400166:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400168:	4b0b      	ldr	r3, [pc, #44]	; (400198 <sysclk_init+0x60>)
  40016a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40016c:	4801      	ldr	r0, [pc, #4]	; (400174 <sysclk_init+0x3c>)
  40016e:	4b02      	ldr	r3, [pc, #8]	; (400178 <sysclk_init+0x40>)
  400170:	4798      	blx	r3
  400172:	bd10      	pop	{r4, pc}
  400174:	07270e00 	.word	0x07270e00
  400178:	00400889 	.word	0x00400889
  40017c:	004005f1 	.word	0x004005f1
  400180:	00400645 	.word	0x00400645
  400184:	00400655 	.word	0x00400655
  400188:	20133f01 	.word	0x20133f01
  40018c:	400e0400 	.word	0x400e0400
  400190:	00400665 	.word	0x00400665
  400194:	0040058d 	.word	0x0040058d
  400198:	00400779 	.word	0x00400779

0040019c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  40019c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40019e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4001a2:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <board_init+0x48>)
  4001a4:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001a6:	200b      	movs	r0, #11
  4001a8:	4c0f      	ldr	r4, [pc, #60]	; (4001e8 <board_init+0x4c>)
  4001aa:	47a0      	blx	r4
  4001ac:	200c      	movs	r0, #12
  4001ae:	47a0      	blx	r4
  4001b0:	200d      	movs	r0, #13
  4001b2:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4001b4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4001b8:	2013      	movs	r0, #19
  4001ba:	4c0c      	ldr	r4, [pc, #48]	; (4001ec <board_init+0x50>)
  4001bc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  4001be:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4001c2:	2014      	movs	r0, #20
  4001c4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4001c6:	490a      	ldr	r1, [pc, #40]	; (4001f0 <board_init+0x54>)
  4001c8:	2023      	movs	r0, #35	; 0x23
  4001ca:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  4001cc:	4909      	ldr	r1, [pc, #36]	; (4001f4 <board_init+0x58>)
  4001ce:	204c      	movs	r0, #76	; 0x4c
  4001d0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4001d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4001d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4001da:	4807      	ldr	r0, [pc, #28]	; (4001f8 <board_init+0x5c>)
  4001dc:	4b07      	ldr	r3, [pc, #28]	; (4001fc <board_init+0x60>)
  4001de:	4798      	blx	r3
  4001e0:	bd10      	pop	{r4, pc}
  4001e2:	bf00      	nop
  4001e4:	400e1450 	.word	0x400e1450
  4001e8:	00400675 	.word	0x00400675
  4001ec:	004002f1 	.word	0x004002f1
  4001f0:	28000079 	.word	0x28000079
  4001f4:	28000059 	.word	0x28000059
  4001f8:	400e0e00 	.word	0x400e0e00
  4001fc:	00400411 	.word	0x00400411

00400200 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400200:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400202:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400206:	d039      	beq.n	40027c <pio_set_peripheral+0x7c>
  400208:	d813      	bhi.n	400232 <pio_set_peripheral+0x32>
  40020a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40020e:	d025      	beq.n	40025c <pio_set_peripheral+0x5c>
  400210:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400214:	d10a      	bne.n	40022c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400216:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400218:	4313      	orrs	r3, r2
  40021a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40021c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40021e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400220:	400b      	ands	r3, r1
  400222:	ea23 0302 	bic.w	r3, r3, r2
  400226:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400228:	6042      	str	r2, [r0, #4]
  40022a:	4770      	bx	lr
	switch (ul_type) {
  40022c:	2900      	cmp	r1, #0
  40022e:	d1fb      	bne.n	400228 <pio_set_peripheral+0x28>
  400230:	4770      	bx	lr
  400232:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400236:	d020      	beq.n	40027a <pio_set_peripheral+0x7a>
  400238:	d809      	bhi.n	40024e <pio_set_peripheral+0x4e>
  40023a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40023e:	d1f3      	bne.n	400228 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400240:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400242:	4313      	orrs	r3, r2
  400244:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400246:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400248:	4313      	orrs	r3, r2
  40024a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40024c:	e7ec      	b.n	400228 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40024e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400252:	d012      	beq.n	40027a <pio_set_peripheral+0x7a>
  400254:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400258:	d00f      	beq.n	40027a <pio_set_peripheral+0x7a>
  40025a:	e7e5      	b.n	400228 <pio_set_peripheral+0x28>
{
  40025c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40025e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400260:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400262:	43d3      	mvns	r3, r2
  400264:	4021      	ands	r1, r4
  400266:	461c      	mov	r4, r3
  400268:	4019      	ands	r1, r3
  40026a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40026c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40026e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400270:	400b      	ands	r3, r1
  400272:	4023      	ands	r3, r4
  400274:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400276:	6042      	str	r2, [r0, #4]
}
  400278:	bc10      	pop	{r4}
  40027a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40027c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40027e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400280:	400b      	ands	r3, r1
  400282:	ea23 0302 	bic.w	r3, r3, r2
  400286:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400288:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40028a:	4313      	orrs	r3, r2
  40028c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40028e:	e7cb      	b.n	400228 <pio_set_peripheral+0x28>

00400290 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400290:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400292:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400296:	bf14      	ite	ne
  400298:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40029a:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40029c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4002a0:	bf14      	ite	ne
  4002a2:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  4002a4:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  4002a6:	f012 0f02 	tst.w	r2, #2
  4002aa:	d107      	bne.n	4002bc <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4002ac:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4002b0:	bf18      	it	ne
  4002b2:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  4002b6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4002b8:	6001      	str	r1, [r0, #0]
  4002ba:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  4002bc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4002c0:	e7f9      	b.n	4002b6 <pio_set_input+0x26>

004002c2 <pio_set_output>:
{
  4002c2:	b410      	push	{r4}
  4002c4:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4002c6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4002c8:	b944      	cbnz	r4, 4002dc <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  4002ca:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4002cc:	b143      	cbz	r3, 4002e0 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  4002ce:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4002d0:	b942      	cbnz	r2, 4002e4 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  4002d2:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4002d4:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4002d6:	6001      	str	r1, [r0, #0]
}
  4002d8:	bc10      	pop	{r4}
  4002da:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4002dc:	6641      	str	r1, [r0, #100]	; 0x64
  4002de:	e7f5      	b.n	4002cc <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4002e0:	6541      	str	r1, [r0, #84]	; 0x54
  4002e2:	e7f5      	b.n	4002d0 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4002e4:	6301      	str	r1, [r0, #48]	; 0x30
  4002e6:	e7f5      	b.n	4002d4 <pio_set_output+0x12>

004002e8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4002e8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4002ea:	4770      	bx	lr

004002ec <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4002ec:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4002ee:	4770      	bx	lr

004002f0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4002f0:	b570      	push	{r4, r5, r6, lr}
  4002f2:	b082      	sub	sp, #8
  4002f4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4002f6:	0943      	lsrs	r3, r0, #5
  4002f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4002fc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400300:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  400302:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40030a:	d053      	beq.n	4003b4 <pio_configure_pin+0xc4>
  40030c:	d80a      	bhi.n	400324 <pio_configure_pin+0x34>
  40030e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400312:	d02d      	beq.n	400370 <pio_configure_pin+0x80>
  400314:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400318:	d03b      	beq.n	400392 <pio_configure_pin+0xa2>
  40031a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40031e:	d015      	beq.n	40034c <pio_configure_pin+0x5c>
		return 0;
  400320:	2000      	movs	r0, #0
  400322:	e023      	b.n	40036c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  400324:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400328:	d055      	beq.n	4003d6 <pio_configure_pin+0xe6>
  40032a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40032e:	d052      	beq.n	4003d6 <pio_configure_pin+0xe6>
  400330:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400334:	d1f4      	bne.n	400320 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400336:	f000 011f 	and.w	r1, r0, #31
  40033a:	2601      	movs	r6, #1
  40033c:	462a      	mov	r2, r5
  40033e:	fa06 f101 	lsl.w	r1, r6, r1
  400342:	4620      	mov	r0, r4
  400344:	4b2f      	ldr	r3, [pc, #188]	; (400404 <pio_configure_pin+0x114>)
  400346:	4798      	blx	r3
	return 1;
  400348:	4630      	mov	r0, r6
		break;
  40034a:	e00f      	b.n	40036c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40034c:	f000 001f 	and.w	r0, r0, #31
  400350:	2601      	movs	r6, #1
  400352:	4086      	lsls	r6, r0
  400354:	4632      	mov	r2, r6
  400356:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40035a:	4620      	mov	r0, r4
  40035c:	4b2a      	ldr	r3, [pc, #168]	; (400408 <pio_configure_pin+0x118>)
  40035e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400360:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400364:	bf14      	ite	ne
  400366:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400368:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40036a:	2001      	movs	r0, #1
}
  40036c:	b002      	add	sp, #8
  40036e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400370:	f000 001f 	and.w	r0, r0, #31
  400374:	2601      	movs	r6, #1
  400376:	4086      	lsls	r6, r0
  400378:	4632      	mov	r2, r6
  40037a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40037e:	4620      	mov	r0, r4
  400380:	4b21      	ldr	r3, [pc, #132]	; (400408 <pio_configure_pin+0x118>)
  400382:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400384:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400388:	bf14      	ite	ne
  40038a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40038c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40038e:	2001      	movs	r0, #1
  400390:	e7ec      	b.n	40036c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400392:	f000 001f 	and.w	r0, r0, #31
  400396:	2601      	movs	r6, #1
  400398:	4086      	lsls	r6, r0
  40039a:	4632      	mov	r2, r6
  40039c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4003a0:	4620      	mov	r0, r4
  4003a2:	4b19      	ldr	r3, [pc, #100]	; (400408 <pio_configure_pin+0x118>)
  4003a4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4003a6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4003aa:	bf14      	ite	ne
  4003ac:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4003ae:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4003b0:	2001      	movs	r0, #1
  4003b2:	e7db      	b.n	40036c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4003b4:	f000 001f 	and.w	r0, r0, #31
  4003b8:	2601      	movs	r6, #1
  4003ba:	4086      	lsls	r6, r0
  4003bc:	4632      	mov	r2, r6
  4003be:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4003c2:	4620      	mov	r0, r4
  4003c4:	4b10      	ldr	r3, [pc, #64]	; (400408 <pio_configure_pin+0x118>)
  4003c6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4003c8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4003cc:	bf14      	ite	ne
  4003ce:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4003d0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4003d2:	2001      	movs	r0, #1
  4003d4:	e7ca      	b.n	40036c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4003d6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4003da:	f000 011f 	and.w	r1, r0, #31
  4003de:	2601      	movs	r6, #1
  4003e0:	ea05 0306 	and.w	r3, r5, r6
  4003e4:	9300      	str	r3, [sp, #0]
  4003e6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4003ea:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4003ee:	bf14      	ite	ne
  4003f0:	2200      	movne	r2, #0
  4003f2:	2201      	moveq	r2, #1
  4003f4:	fa06 f101 	lsl.w	r1, r6, r1
  4003f8:	4620      	mov	r0, r4
  4003fa:	4c04      	ldr	r4, [pc, #16]	; (40040c <pio_configure_pin+0x11c>)
  4003fc:	47a0      	blx	r4
	return 1;
  4003fe:	4630      	mov	r0, r6
		break;
  400400:	e7b4      	b.n	40036c <pio_configure_pin+0x7c>
  400402:	bf00      	nop
  400404:	00400291 	.word	0x00400291
  400408:	00400201 	.word	0x00400201
  40040c:	004002c3 	.word	0x004002c3

00400410 <pio_configure_pin_group>:
{
  400410:	b570      	push	{r4, r5, r6, lr}
  400412:	b082      	sub	sp, #8
  400414:	4605      	mov	r5, r0
  400416:	460e      	mov	r6, r1
  400418:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  40041a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40041e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400422:	d03d      	beq.n	4004a0 <pio_configure_pin_group+0x90>
  400424:	d80a      	bhi.n	40043c <pio_configure_pin_group+0x2c>
  400426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40042a:	d021      	beq.n	400470 <pio_configure_pin_group+0x60>
  40042c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400430:	d02a      	beq.n	400488 <pio_configure_pin_group+0x78>
  400432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400436:	d00e      	beq.n	400456 <pio_configure_pin_group+0x46>
		return 0;
  400438:	2000      	movs	r0, #0
  40043a:	e017      	b.n	40046c <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  40043c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400440:	d03a      	beq.n	4004b8 <pio_configure_pin_group+0xa8>
  400442:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400446:	d037      	beq.n	4004b8 <pio_configure_pin_group+0xa8>
  400448:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40044c:	d1f4      	bne.n	400438 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  40044e:	4b23      	ldr	r3, [pc, #140]	; (4004dc <pio_configure_pin_group+0xcc>)
  400450:	4798      	blx	r3
	return 1;
  400452:	2001      	movs	r0, #1
		break;
  400454:	e00a      	b.n	40046c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400456:	460a      	mov	r2, r1
  400458:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40045c:	4b20      	ldr	r3, [pc, #128]	; (4004e0 <pio_configure_pin_group+0xd0>)
  40045e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400460:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400464:	bf14      	ite	ne
  400466:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400468:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40046a:	2001      	movs	r0, #1
}
  40046c:	b002      	add	sp, #8
  40046e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400470:	460a      	mov	r2, r1
  400472:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400476:	4b1a      	ldr	r3, [pc, #104]	; (4004e0 <pio_configure_pin_group+0xd0>)
  400478:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40047a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40047e:	bf14      	ite	ne
  400480:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400482:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400484:	2001      	movs	r0, #1
  400486:	e7f1      	b.n	40046c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400488:	460a      	mov	r2, r1
  40048a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40048e:	4b14      	ldr	r3, [pc, #80]	; (4004e0 <pio_configure_pin_group+0xd0>)
  400490:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400492:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400496:	bf14      	ite	ne
  400498:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40049a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40049c:	2001      	movs	r0, #1
  40049e:	e7e5      	b.n	40046c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4004a0:	460a      	mov	r2, r1
  4004a2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4004a6:	4b0e      	ldr	r3, [pc, #56]	; (4004e0 <pio_configure_pin_group+0xd0>)
  4004a8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4004aa:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4004ae:	bf14      	ite	ne
  4004b0:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4004b2:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4004b4:	2001      	movs	r0, #1
  4004b6:	e7d9      	b.n	40046c <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4004b8:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  4004bc:	f004 0301 	and.w	r3, r4, #1
  4004c0:	9300      	str	r3, [sp, #0]
  4004c2:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4004c6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4004ca:	bf14      	ite	ne
  4004cc:	2200      	movne	r2, #0
  4004ce:	2201      	moveq	r2, #1
  4004d0:	4631      	mov	r1, r6
  4004d2:	4628      	mov	r0, r5
  4004d4:	4c03      	ldr	r4, [pc, #12]	; (4004e4 <pio_configure_pin_group+0xd4>)
  4004d6:	47a0      	blx	r4
	return 1;
  4004d8:	2001      	movs	r0, #1
		break;
  4004da:	e7c7      	b.n	40046c <pio_configure_pin_group+0x5c>
  4004dc:	00400291 	.word	0x00400291
  4004e0:	00400201 	.word	0x00400201
  4004e4:	004002c3 	.word	0x004002c3

004004e8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4004e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4004ec:	4681      	mov	r9, r0
  4004ee:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4004f0:	4b12      	ldr	r3, [pc, #72]	; (40053c <pio_handler_process+0x54>)
  4004f2:	4798      	blx	r3
  4004f4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4004f6:	4648      	mov	r0, r9
  4004f8:	4b11      	ldr	r3, [pc, #68]	; (400540 <pio_handler_process+0x58>)
  4004fa:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4004fc:	4005      	ands	r5, r0
  4004fe:	d013      	beq.n	400528 <pio_handler_process+0x40>
  400500:	4c10      	ldr	r4, [pc, #64]	; (400544 <pio_handler_process+0x5c>)
  400502:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400506:	e003      	b.n	400510 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400508:	42b4      	cmp	r4, r6
  40050a:	d00d      	beq.n	400528 <pio_handler_process+0x40>
  40050c:	3410      	adds	r4, #16
		while (status != 0) {
  40050e:	b15d      	cbz	r5, 400528 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400510:	6820      	ldr	r0, [r4, #0]
  400512:	42b8      	cmp	r0, r7
  400514:	d1f8      	bne.n	400508 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400516:	6861      	ldr	r1, [r4, #4]
  400518:	4229      	tst	r1, r5
  40051a:	d0f5      	beq.n	400508 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40051c:	68e3      	ldr	r3, [r4, #12]
  40051e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400520:	6863      	ldr	r3, [r4, #4]
  400522:	ea25 0503 	bic.w	r5, r5, r3
  400526:	e7ef      	b.n	400508 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400528:	4b07      	ldr	r3, [pc, #28]	; (400548 <pio_handler_process+0x60>)
  40052a:	681b      	ldr	r3, [r3, #0]
  40052c:	b123      	cbz	r3, 400538 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40052e:	4b07      	ldr	r3, [pc, #28]	; (40054c <pio_handler_process+0x64>)
  400530:	681b      	ldr	r3, [r3, #0]
  400532:	b10b      	cbz	r3, 400538 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400534:	4648      	mov	r0, r9
  400536:	4798      	blx	r3
  400538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40053c:	004002e9 	.word	0x004002e9
  400540:	004002ed 	.word	0x004002ed
  400544:	20000450 	.word	0x20000450
  400548:	200004c4 	.word	0x200004c4
  40054c:	200004c0 	.word	0x200004c0

00400550 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400550:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400552:	210b      	movs	r1, #11
  400554:	4801      	ldr	r0, [pc, #4]	; (40055c <PIOA_Handler+0xc>)
  400556:	4b02      	ldr	r3, [pc, #8]	; (400560 <PIOA_Handler+0x10>)
  400558:	4798      	blx	r3
  40055a:	bd08      	pop	{r3, pc}
  40055c:	400e0e00 	.word	0x400e0e00
  400560:	004004e9 	.word	0x004004e9

00400564 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400564:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400566:	210c      	movs	r1, #12
  400568:	4801      	ldr	r0, [pc, #4]	; (400570 <PIOB_Handler+0xc>)
  40056a:	4b02      	ldr	r3, [pc, #8]	; (400574 <PIOB_Handler+0x10>)
  40056c:	4798      	blx	r3
  40056e:	bd08      	pop	{r3, pc}
  400570:	400e1000 	.word	0x400e1000
  400574:	004004e9 	.word	0x004004e9

00400578 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400578:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40057a:	210d      	movs	r1, #13
  40057c:	4801      	ldr	r0, [pc, #4]	; (400584 <PIOC_Handler+0xc>)
  40057e:	4b02      	ldr	r3, [pc, #8]	; (400588 <PIOC_Handler+0x10>)
  400580:	4798      	blx	r3
  400582:	bd08      	pop	{r3, pc}
  400584:	400e1200 	.word	0x400e1200
  400588:	004004e9 	.word	0x004004e9

0040058c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40058c:	4a17      	ldr	r2, [pc, #92]	; (4005ec <pmc_switch_mck_to_pllack+0x60>)
  40058e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400594:	4318      	orrs	r0, r3
  400596:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400598:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40059a:	f013 0f08 	tst.w	r3, #8
  40059e:	d10a      	bne.n	4005b6 <pmc_switch_mck_to_pllack+0x2a>
  4005a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005a4:	4911      	ldr	r1, [pc, #68]	; (4005ec <pmc_switch_mck_to_pllack+0x60>)
  4005a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005a8:	f012 0f08 	tst.w	r2, #8
  4005ac:	d103      	bne.n	4005b6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005ae:	3b01      	subs	r3, #1
  4005b0:	d1f9      	bne.n	4005a6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4005b2:	2001      	movs	r0, #1
  4005b4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4005b6:	4a0d      	ldr	r2, [pc, #52]	; (4005ec <pmc_switch_mck_to_pllack+0x60>)
  4005b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005ba:	f023 0303 	bic.w	r3, r3, #3
  4005be:	f043 0302 	orr.w	r3, r3, #2
  4005c2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005c6:	f013 0f08 	tst.w	r3, #8
  4005ca:	d10a      	bne.n	4005e2 <pmc_switch_mck_to_pllack+0x56>
  4005cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005d0:	4906      	ldr	r1, [pc, #24]	; (4005ec <pmc_switch_mck_to_pllack+0x60>)
  4005d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005d4:	f012 0f08 	tst.w	r2, #8
  4005d8:	d105      	bne.n	4005e6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005da:	3b01      	subs	r3, #1
  4005dc:	d1f9      	bne.n	4005d2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4005de:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4005e0:	4770      	bx	lr
	return 0;
  4005e2:	2000      	movs	r0, #0
  4005e4:	4770      	bx	lr
  4005e6:	2000      	movs	r0, #0
  4005e8:	4770      	bx	lr
  4005ea:	bf00      	nop
  4005ec:	400e0400 	.word	0x400e0400

004005f0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4005f0:	b9c8      	cbnz	r0, 400626 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005f2:	4a11      	ldr	r2, [pc, #68]	; (400638 <pmc_switch_mainck_to_xtal+0x48>)
  4005f4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4005f6:	0209      	lsls	r1, r1, #8
  4005f8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4005fa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4005fe:	f023 0303 	bic.w	r3, r3, #3
  400602:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400606:	f043 0301 	orr.w	r3, r3, #1
  40060a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40060c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40060e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400610:	f013 0f01 	tst.w	r3, #1
  400614:	d0fb      	beq.n	40060e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400616:	4a08      	ldr	r2, [pc, #32]	; (400638 <pmc_switch_mainck_to_xtal+0x48>)
  400618:	6a13      	ldr	r3, [r2, #32]
  40061a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40061e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400622:	6213      	str	r3, [r2, #32]
  400624:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400626:	4904      	ldr	r1, [pc, #16]	; (400638 <pmc_switch_mainck_to_xtal+0x48>)
  400628:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40062a:	4a04      	ldr	r2, [pc, #16]	; (40063c <pmc_switch_mainck_to_xtal+0x4c>)
  40062c:	401a      	ands	r2, r3
  40062e:	4b04      	ldr	r3, [pc, #16]	; (400640 <pmc_switch_mainck_to_xtal+0x50>)
  400630:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400632:	620b      	str	r3, [r1, #32]
  400634:	4770      	bx	lr
  400636:	bf00      	nop
  400638:	400e0400 	.word	0x400e0400
  40063c:	fec8fffc 	.word	0xfec8fffc
  400640:	01370002 	.word	0x01370002

00400644 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400644:	4b02      	ldr	r3, [pc, #8]	; (400650 <pmc_osc_is_ready_mainck+0xc>)
  400646:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400648:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40064c:	4770      	bx	lr
  40064e:	bf00      	nop
  400650:	400e0400 	.word	0x400e0400

00400654 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400654:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400658:	4b01      	ldr	r3, [pc, #4]	; (400660 <pmc_disable_pllack+0xc>)
  40065a:	629a      	str	r2, [r3, #40]	; 0x28
  40065c:	4770      	bx	lr
  40065e:	bf00      	nop
  400660:	400e0400 	.word	0x400e0400

00400664 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400664:	4b02      	ldr	r3, [pc, #8]	; (400670 <pmc_is_locked_pllack+0xc>)
  400666:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400668:	f000 0002 	and.w	r0, r0, #2
  40066c:	4770      	bx	lr
  40066e:	bf00      	nop
  400670:	400e0400 	.word	0x400e0400

00400674 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400674:	2822      	cmp	r0, #34	; 0x22
  400676:	d81e      	bhi.n	4006b6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400678:	281f      	cmp	r0, #31
  40067a:	d80c      	bhi.n	400696 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40067c:	4b11      	ldr	r3, [pc, #68]	; (4006c4 <pmc_enable_periph_clk+0x50>)
  40067e:	699a      	ldr	r2, [r3, #24]
  400680:	2301      	movs	r3, #1
  400682:	4083      	lsls	r3, r0
  400684:	4393      	bics	r3, r2
  400686:	d018      	beq.n	4006ba <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400688:	2301      	movs	r3, #1
  40068a:	fa03 f000 	lsl.w	r0, r3, r0
  40068e:	4b0d      	ldr	r3, [pc, #52]	; (4006c4 <pmc_enable_periph_clk+0x50>)
  400690:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400692:	2000      	movs	r0, #0
  400694:	4770      	bx	lr
		ul_id -= 32;
  400696:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400698:	4b0a      	ldr	r3, [pc, #40]	; (4006c4 <pmc_enable_periph_clk+0x50>)
  40069a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40069e:	2301      	movs	r3, #1
  4006a0:	4083      	lsls	r3, r0
  4006a2:	4393      	bics	r3, r2
  4006a4:	d00b      	beq.n	4006be <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4006a6:	2301      	movs	r3, #1
  4006a8:	fa03 f000 	lsl.w	r0, r3, r0
  4006ac:	4b05      	ldr	r3, [pc, #20]	; (4006c4 <pmc_enable_periph_clk+0x50>)
  4006ae:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4006b2:	2000      	movs	r0, #0
  4006b4:	4770      	bx	lr
		return 1;
  4006b6:	2001      	movs	r0, #1
  4006b8:	4770      	bx	lr
	return 0;
  4006ba:	2000      	movs	r0, #0
  4006bc:	4770      	bx	lr
  4006be:	2000      	movs	r0, #0
}
  4006c0:	4770      	bx	lr
  4006c2:	bf00      	nop
  4006c4:	400e0400 	.word	0x400e0400

004006c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4006c8:	e7fe      	b.n	4006c8 <Dummy_Handler>
	...

004006cc <Reset_Handler>:
{
  4006cc:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4006ce:	4b21      	ldr	r3, [pc, #132]	; (400754 <Reset_Handler+0x88>)
  4006d0:	4a21      	ldr	r2, [pc, #132]	; (400758 <Reset_Handler+0x8c>)
  4006d2:	429a      	cmp	r2, r3
  4006d4:	d928      	bls.n	400728 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4006d6:	4b21      	ldr	r3, [pc, #132]	; (40075c <Reset_Handler+0x90>)
  4006d8:	4a1e      	ldr	r2, [pc, #120]	; (400754 <Reset_Handler+0x88>)
  4006da:	429a      	cmp	r2, r3
  4006dc:	d20c      	bcs.n	4006f8 <Reset_Handler+0x2c>
  4006de:	3b01      	subs	r3, #1
  4006e0:	1a9b      	subs	r3, r3, r2
  4006e2:	f023 0303 	bic.w	r3, r3, #3
  4006e6:	3304      	adds	r3, #4
  4006e8:	4413      	add	r3, r2
  4006ea:	491b      	ldr	r1, [pc, #108]	; (400758 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  4006ec:	f851 0b04 	ldr.w	r0, [r1], #4
  4006f0:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4006f4:	429a      	cmp	r2, r3
  4006f6:	d1f9      	bne.n	4006ec <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4006f8:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  4006fa:	4b19      	ldr	r3, [pc, #100]	; (400760 <Reset_Handler+0x94>)
  4006fc:	4a19      	ldr	r2, [pc, #100]	; (400764 <Reset_Handler+0x98>)
  4006fe:	429a      	cmp	r2, r3
  400700:	d20a      	bcs.n	400718 <Reset_Handler+0x4c>
  400702:	3b01      	subs	r3, #1
  400704:	1a9b      	subs	r3, r3, r2
  400706:	f023 0303 	bic.w	r3, r3, #3
  40070a:	3304      	adds	r3, #4
  40070c:	4413      	add	r3, r2
		*pDest++ = 0;
  40070e:	2100      	movs	r1, #0
  400710:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400714:	429a      	cmp	r2, r3
  400716:	d1fb      	bne.n	400710 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  400718:	4b13      	ldr	r3, [pc, #76]	; (400768 <Reset_Handler+0x9c>)
  40071a:	4a14      	ldr	r2, [pc, #80]	; (40076c <Reset_Handler+0xa0>)
  40071c:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  40071e:	4b14      	ldr	r3, [pc, #80]	; (400770 <Reset_Handler+0xa4>)
  400720:	4798      	blx	r3
	main();
  400722:	4b14      	ldr	r3, [pc, #80]	; (400774 <Reset_Handler+0xa8>)
  400724:	4798      	blx	r3
  400726:	e7fe      	b.n	400726 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  400728:	4b0a      	ldr	r3, [pc, #40]	; (400754 <Reset_Handler+0x88>)
  40072a:	4a0b      	ldr	r2, [pc, #44]	; (400758 <Reset_Handler+0x8c>)
  40072c:	429a      	cmp	r2, r3
  40072e:	d2e3      	bcs.n	4006f8 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400730:	4b0a      	ldr	r3, [pc, #40]	; (40075c <Reset_Handler+0x90>)
  400732:	4808      	ldr	r0, [pc, #32]	; (400754 <Reset_Handler+0x88>)
  400734:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400736:	4611      	mov	r1, r2
  400738:	3a04      	subs	r2, #4
  40073a:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  40073c:	2800      	cmp	r0, #0
  40073e:	d0db      	beq.n	4006f8 <Reset_Handler+0x2c>
  400740:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  400744:	f852 0904 	ldr.w	r0, [r2], #-4
  400748:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  40074c:	42ca      	cmn	r2, r1
  40074e:	d1f9      	bne.n	400744 <Reset_Handler+0x78>
  400750:	e7d2      	b.n	4006f8 <Reset_Handler+0x2c>
  400752:	bf00      	nop
  400754:	20000000 	.word	0x20000000
  400758:	00400b34 	.word	0x00400b34
  40075c:	20000434 	.word	0x20000434
  400760:	200004ec 	.word	0x200004ec
  400764:	20000434 	.word	0x20000434
  400768:	e000ed00 	.word	0xe000ed00
  40076c:	00400000 	.word	0x00400000
  400770:	0040099d 	.word	0x0040099d
  400774:	0040091d 	.word	0x0040091d

00400778 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400778:	4b3c      	ldr	r3, [pc, #240]	; (40086c <SystemCoreClockUpdate+0xf4>)
  40077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40077c:	f003 0303 	and.w	r3, r3, #3
  400780:	2b03      	cmp	r3, #3
  400782:	d80e      	bhi.n	4007a2 <SystemCoreClockUpdate+0x2a>
  400784:	e8df f003 	tbb	[pc, r3]
  400788:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40078c:	4b38      	ldr	r3, [pc, #224]	; (400870 <SystemCoreClockUpdate+0xf8>)
  40078e:	695b      	ldr	r3, [r3, #20]
  400790:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400794:	bf14      	ite	ne
  400796:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40079a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40079e:	4b35      	ldr	r3, [pc, #212]	; (400874 <SystemCoreClockUpdate+0xfc>)
  4007a0:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4007a2:	4b32      	ldr	r3, [pc, #200]	; (40086c <SystemCoreClockUpdate+0xf4>)
  4007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4007a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4007aa:	2b70      	cmp	r3, #112	; 0x70
  4007ac:	d055      	beq.n	40085a <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4007ae:	4b2f      	ldr	r3, [pc, #188]	; (40086c <SystemCoreClockUpdate+0xf4>)
  4007b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  4007b2:	4930      	ldr	r1, [pc, #192]	; (400874 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4007b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  4007b8:	680b      	ldr	r3, [r1, #0]
  4007ba:	40d3      	lsrs	r3, r2
  4007bc:	600b      	str	r3, [r1, #0]
  4007be:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4007c0:	4b2a      	ldr	r3, [pc, #168]	; (40086c <SystemCoreClockUpdate+0xf4>)
  4007c2:	6a1b      	ldr	r3, [r3, #32]
  4007c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4007c8:	d003      	beq.n	4007d2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4007ca:	4a2b      	ldr	r2, [pc, #172]	; (400878 <SystemCoreClockUpdate+0x100>)
  4007cc:	4b29      	ldr	r3, [pc, #164]	; (400874 <SystemCoreClockUpdate+0xfc>)
  4007ce:	601a      	str	r2, [r3, #0]
  4007d0:	e7e7      	b.n	4007a2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4007d2:	4a2a      	ldr	r2, [pc, #168]	; (40087c <SystemCoreClockUpdate+0x104>)
  4007d4:	4b27      	ldr	r3, [pc, #156]	; (400874 <SystemCoreClockUpdate+0xfc>)
  4007d6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4007d8:	4b24      	ldr	r3, [pc, #144]	; (40086c <SystemCoreClockUpdate+0xf4>)
  4007da:	6a1b      	ldr	r3, [r3, #32]
  4007dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4007e0:	2b10      	cmp	r3, #16
  4007e2:	d005      	beq.n	4007f0 <SystemCoreClockUpdate+0x78>
  4007e4:	2b20      	cmp	r3, #32
  4007e6:	d1dc      	bne.n	4007a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4007e8:	4a23      	ldr	r2, [pc, #140]	; (400878 <SystemCoreClockUpdate+0x100>)
  4007ea:	4b22      	ldr	r3, [pc, #136]	; (400874 <SystemCoreClockUpdate+0xfc>)
  4007ec:	601a      	str	r2, [r3, #0]
			break;
  4007ee:	e7d8      	b.n	4007a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4007f0:	4a23      	ldr	r2, [pc, #140]	; (400880 <SystemCoreClockUpdate+0x108>)
  4007f2:	4b20      	ldr	r3, [pc, #128]	; (400874 <SystemCoreClockUpdate+0xfc>)
  4007f4:	601a      	str	r2, [r3, #0]
			break;
  4007f6:	e7d4      	b.n	4007a2 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4007f8:	4b1c      	ldr	r3, [pc, #112]	; (40086c <SystemCoreClockUpdate+0xf4>)
  4007fa:	6a1b      	ldr	r3, [r3, #32]
  4007fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400800:	d018      	beq.n	400834 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400802:	4a1d      	ldr	r2, [pc, #116]	; (400878 <SystemCoreClockUpdate+0x100>)
  400804:	4b1b      	ldr	r3, [pc, #108]	; (400874 <SystemCoreClockUpdate+0xfc>)
  400806:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400808:	4b18      	ldr	r3, [pc, #96]	; (40086c <SystemCoreClockUpdate+0xf4>)
  40080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40080c:	f003 0303 	and.w	r3, r3, #3
  400810:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400812:	4a16      	ldr	r2, [pc, #88]	; (40086c <SystemCoreClockUpdate+0xf4>)
  400814:	bf07      	ittee	eq
  400816:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400818:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40081a:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40081c:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  40081e:	4815      	ldr	r0, [pc, #84]	; (400874 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400820:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400824:	6803      	ldr	r3, [r0, #0]
  400826:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  40082a:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40082c:	fbb3 f3f2 	udiv	r3, r3, r2
  400830:	6003      	str	r3, [r0, #0]
  400832:	e7b6      	b.n	4007a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400834:	4a11      	ldr	r2, [pc, #68]	; (40087c <SystemCoreClockUpdate+0x104>)
  400836:	4b0f      	ldr	r3, [pc, #60]	; (400874 <SystemCoreClockUpdate+0xfc>)
  400838:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40083a:	4b0c      	ldr	r3, [pc, #48]	; (40086c <SystemCoreClockUpdate+0xf4>)
  40083c:	6a1b      	ldr	r3, [r3, #32]
  40083e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400842:	2b10      	cmp	r3, #16
  400844:	d005      	beq.n	400852 <SystemCoreClockUpdate+0xda>
  400846:	2b20      	cmp	r3, #32
  400848:	d1de      	bne.n	400808 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40084a:	4a0b      	ldr	r2, [pc, #44]	; (400878 <SystemCoreClockUpdate+0x100>)
  40084c:	4b09      	ldr	r3, [pc, #36]	; (400874 <SystemCoreClockUpdate+0xfc>)
  40084e:	601a      	str	r2, [r3, #0]
					break;
  400850:	e7da      	b.n	400808 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400852:	4a0b      	ldr	r2, [pc, #44]	; (400880 <SystemCoreClockUpdate+0x108>)
  400854:	4b07      	ldr	r3, [pc, #28]	; (400874 <SystemCoreClockUpdate+0xfc>)
  400856:	601a      	str	r2, [r3, #0]
					break;
  400858:	e7d6      	b.n	400808 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40085a:	4a06      	ldr	r2, [pc, #24]	; (400874 <SystemCoreClockUpdate+0xfc>)
  40085c:	6813      	ldr	r3, [r2, #0]
  40085e:	4909      	ldr	r1, [pc, #36]	; (400884 <SystemCoreClockUpdate+0x10c>)
  400860:	fba1 1303 	umull	r1, r3, r1, r3
  400864:	085b      	lsrs	r3, r3, #1
  400866:	6013      	str	r3, [r2, #0]
  400868:	4770      	bx	lr
  40086a:	bf00      	nop
  40086c:	400e0400 	.word	0x400e0400
  400870:	400e1410 	.word	0x400e1410
  400874:	20000000 	.word	0x20000000
  400878:	00b71b00 	.word	0x00b71b00
  40087c:	003d0900 	.word	0x003d0900
  400880:	007a1200 	.word	0x007a1200
  400884:	aaaaaaab 	.word	0xaaaaaaab

00400888 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400888:	4b1a      	ldr	r3, [pc, #104]	; (4008f4 <system_init_flash+0x6c>)
  40088a:	4298      	cmp	r0, r3
  40088c:	d914      	bls.n	4008b8 <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40088e:	4b1a      	ldr	r3, [pc, #104]	; (4008f8 <system_init_flash+0x70>)
  400890:	4298      	cmp	r0, r3
  400892:	d919      	bls.n	4008c8 <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400894:	4b19      	ldr	r3, [pc, #100]	; (4008fc <system_init_flash+0x74>)
  400896:	4298      	cmp	r0, r3
  400898:	d91d      	bls.n	4008d6 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40089a:	4b19      	ldr	r3, [pc, #100]	; (400900 <system_init_flash+0x78>)
  40089c:	4298      	cmp	r0, r3
  40089e:	d921      	bls.n	4008e4 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4008a0:	4b18      	ldr	r3, [pc, #96]	; (400904 <system_init_flash+0x7c>)
  4008a2:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4008a4:	bf94      	ite	ls
  4008a6:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4008aa:	4b17      	ldrhi	r3, [pc, #92]	; (400908 <system_init_flash+0x80>)
  4008ac:	4a17      	ldr	r2, [pc, #92]	; (40090c <system_init_flash+0x84>)
  4008ae:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4008b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4008b4:	6013      	str	r3, [r2, #0]
  4008b6:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4008b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  4008bc:	4a13      	ldr	r2, [pc, #76]	; (40090c <system_init_flash+0x84>)
  4008be:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4008c0:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4008c4:	6013      	str	r3, [r2, #0]
  4008c6:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4008c8:	4b11      	ldr	r3, [pc, #68]	; (400910 <system_init_flash+0x88>)
  4008ca:	4a10      	ldr	r2, [pc, #64]	; (40090c <system_init_flash+0x84>)
  4008cc:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4008ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4008d2:	6013      	str	r3, [r2, #0]
  4008d4:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4008d6:	4b0f      	ldr	r3, [pc, #60]	; (400914 <system_init_flash+0x8c>)
  4008d8:	4a0c      	ldr	r2, [pc, #48]	; (40090c <system_init_flash+0x84>)
  4008da:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4008dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4008e0:	6013      	str	r3, [r2, #0]
  4008e2:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4008e4:	4b0c      	ldr	r3, [pc, #48]	; (400918 <system_init_flash+0x90>)
  4008e6:	4a09      	ldr	r2, [pc, #36]	; (40090c <system_init_flash+0x84>)
  4008e8:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4008ea:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4008ee:	6013      	str	r3, [r2, #0]
  4008f0:	4770      	bx	lr
  4008f2:	bf00      	nop
  4008f4:	01312cff 	.word	0x01312cff
  4008f8:	026259ff 	.word	0x026259ff
  4008fc:	039386ff 	.word	0x039386ff
  400900:	04c4b3ff 	.word	0x04c4b3ff
  400904:	05f5e0ff 	.word	0x05f5e0ff
  400908:	04000500 	.word	0x04000500
  40090c:	400e0a00 	.word	0x400e0a00
  400910:	04000100 	.word	0x04000100
  400914:	04000200 	.word	0x04000200
  400918:	04000300 	.word	0x04000300

0040091c <main>:
#define SEN 1<<3
#define BTN 1<<3
#define analogico 1<<7

int main (void)
{
  40091c:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */

sysclk_init();
  40091e:	4b1c      	ldr	r3, [pc, #112]	; (400990 <main+0x74>)
  400920:	4798      	blx	r3

board_init();
  400922:	4b1c      	ldr	r3, [pc, #112]	; (400994 <main+0x78>)
  400924:	4798      	blx	r3


	/* Insert application code here, after the board has been initialized. */

		PIOA->PIO_PER |= LED_VERDE |LED_AZUL;
  400926:	4b1c      	ldr	r3, [pc, #112]	; (400998 <main+0x7c>)
  400928:	681a      	ldr	r2, [r3, #0]
  40092a:	f442 12c0 	orr.w	r2, r2, #1572864	; 0x180000
  40092e:	601a      	str	r2, [r3, #0]
		PIOA->PIO_OER |= LED_VERDE |LED_AZUL;
  400930:	691a      	ldr	r2, [r3, #16]
  400932:	f442 12c0 	orr.w	r2, r2, #1572864	; 0x180000
  400936:	611a      	str	r2, [r3, #16]
		//PIOA->PIO_CODR |= LED_VERDE |LED_AZUL;
		
		PIOB->PIO_PER |= SEN;
  400938:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40093c:	681a      	ldr	r2, [r3, #0]
  40093e:	f042 0208 	orr.w	r2, r2, #8
  400942:	601a      	str	r2, [r3, #0]
		PIOB->PIO_ODR |= SEN;
  400944:	695a      	ldr	r2, [r3, #20]
  400946:	f042 0208 	orr.w	r2, r2, #8
  40094a:	615a      	str	r2, [r3, #20]

		while(1){



			while(!(PIOB->PIO_PDSR & SEN)){
  40094c:	4619      	mov	r1, r3
			
			}
			
			
			while((PIOB->PIO_PDSR & SEN)){
				PIOA->PIO_CODR |= LED_AZUL;
  40094e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  400952:	e007      	b.n	400964 <main+0x48>
				PIOA->PIO_SODR |= LED_AZUL;
  400954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400956:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  40095a:	631a      	str	r2, [r3, #48]	; 0x30
				PIOA->PIO_CODR |= LED_VERDE;
  40095c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  40095e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400962:	635a      	str	r2, [r3, #52]	; 0x34
			while(!(PIOB->PIO_PDSR & SEN)){
  400964:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  400966:	f012 0f08 	tst.w	r2, #8
  40096a:	d0f3      	beq.n	400954 <main+0x38>
			while((PIOB->PIO_PDSR & SEN)){
  40096c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  40096e:	f012 0f08 	tst.w	r2, #8
  400972:	d0f7      	beq.n	400964 <main+0x48>
				PIOA->PIO_CODR |= LED_AZUL;
  400974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  400976:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  40097a:	635a      	str	r2, [r3, #52]	; 0x34
				PIOA->PIO_SODR |= LED_VERDE;
  40097c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40097e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400982:	631a      	str	r2, [r3, #48]	; 0x30
			while((PIOB->PIO_PDSR & SEN)){
  400984:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  400986:	f012 0f08 	tst.w	r2, #8
  40098a:	d1f3      	bne.n	400974 <main+0x58>
  40098c:	e7ea      	b.n	400964 <main+0x48>
  40098e:	bf00      	nop
  400990:	00400139 	.word	0x00400139
  400994:	0040019d 	.word	0x0040019d
  400998:	400e0e00 	.word	0x400e0e00

0040099c <__libc_init_array>:
  40099c:	b570      	push	{r4, r5, r6, lr}
  40099e:	4e0f      	ldr	r6, [pc, #60]	; (4009dc <__libc_init_array+0x40>)
  4009a0:	4d0f      	ldr	r5, [pc, #60]	; (4009e0 <__libc_init_array+0x44>)
  4009a2:	1b76      	subs	r6, r6, r5
  4009a4:	10b6      	asrs	r6, r6, #2
  4009a6:	bf18      	it	ne
  4009a8:	2400      	movne	r4, #0
  4009aa:	d005      	beq.n	4009b8 <__libc_init_array+0x1c>
  4009ac:	3401      	adds	r4, #1
  4009ae:	f855 3b04 	ldr.w	r3, [r5], #4
  4009b2:	4798      	blx	r3
  4009b4:	42a6      	cmp	r6, r4
  4009b6:	d1f9      	bne.n	4009ac <__libc_init_array+0x10>
  4009b8:	4e0a      	ldr	r6, [pc, #40]	; (4009e4 <__libc_init_array+0x48>)
  4009ba:	4d0b      	ldr	r5, [pc, #44]	; (4009e8 <__libc_init_array+0x4c>)
  4009bc:	1b76      	subs	r6, r6, r5
  4009be:	f000 f8a7 	bl	400b10 <_init>
  4009c2:	10b6      	asrs	r6, r6, #2
  4009c4:	bf18      	it	ne
  4009c6:	2400      	movne	r4, #0
  4009c8:	d006      	beq.n	4009d8 <__libc_init_array+0x3c>
  4009ca:	3401      	adds	r4, #1
  4009cc:	f855 3b04 	ldr.w	r3, [r5], #4
  4009d0:	4798      	blx	r3
  4009d2:	42a6      	cmp	r6, r4
  4009d4:	d1f9      	bne.n	4009ca <__libc_init_array+0x2e>
  4009d6:	bd70      	pop	{r4, r5, r6, pc}
  4009d8:	bd70      	pop	{r4, r5, r6, pc}
  4009da:	bf00      	nop
  4009dc:	00400b1c 	.word	0x00400b1c
  4009e0:	00400b1c 	.word	0x00400b1c
  4009e4:	00400b24 	.word	0x00400b24
  4009e8:	00400b1c 	.word	0x00400b1c

004009ec <register_fini>:
  4009ec:	4b02      	ldr	r3, [pc, #8]	; (4009f8 <register_fini+0xc>)
  4009ee:	b113      	cbz	r3, 4009f6 <register_fini+0xa>
  4009f0:	4802      	ldr	r0, [pc, #8]	; (4009fc <register_fini+0x10>)
  4009f2:	f000 b805 	b.w	400a00 <atexit>
  4009f6:	4770      	bx	lr
  4009f8:	00000000 	.word	0x00000000
  4009fc:	00400a0d 	.word	0x00400a0d

00400a00 <atexit>:
  400a00:	2300      	movs	r3, #0
  400a02:	4601      	mov	r1, r0
  400a04:	461a      	mov	r2, r3
  400a06:	4618      	mov	r0, r3
  400a08:	f000 b81e 	b.w	400a48 <__register_exitproc>

00400a0c <__libc_fini_array>:
  400a0c:	b538      	push	{r3, r4, r5, lr}
  400a0e:	4c0a      	ldr	r4, [pc, #40]	; (400a38 <__libc_fini_array+0x2c>)
  400a10:	4d0a      	ldr	r5, [pc, #40]	; (400a3c <__libc_fini_array+0x30>)
  400a12:	1b64      	subs	r4, r4, r5
  400a14:	10a4      	asrs	r4, r4, #2
  400a16:	d00a      	beq.n	400a2e <__libc_fini_array+0x22>
  400a18:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400a1c:	3b01      	subs	r3, #1
  400a1e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400a22:	3c01      	subs	r4, #1
  400a24:	f855 3904 	ldr.w	r3, [r5], #-4
  400a28:	4798      	blx	r3
  400a2a:	2c00      	cmp	r4, #0
  400a2c:	d1f9      	bne.n	400a22 <__libc_fini_array+0x16>
  400a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400a32:	f000 b877 	b.w	400b24 <_fini>
  400a36:	bf00      	nop
  400a38:	00400b34 	.word	0x00400b34
  400a3c:	00400b30 	.word	0x00400b30

00400a40 <__retarget_lock_acquire_recursive>:
  400a40:	4770      	bx	lr
  400a42:	bf00      	nop

00400a44 <__retarget_lock_release_recursive>:
  400a44:	4770      	bx	lr
  400a46:	bf00      	nop

00400a48 <__register_exitproc>:
  400a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400a4c:	4d2c      	ldr	r5, [pc, #176]	; (400b00 <__register_exitproc+0xb8>)
  400a4e:	4606      	mov	r6, r0
  400a50:	6828      	ldr	r0, [r5, #0]
  400a52:	4698      	mov	r8, r3
  400a54:	460f      	mov	r7, r1
  400a56:	4691      	mov	r9, r2
  400a58:	f7ff fff2 	bl	400a40 <__retarget_lock_acquire_recursive>
  400a5c:	4b29      	ldr	r3, [pc, #164]	; (400b04 <__register_exitproc+0xbc>)
  400a5e:	681c      	ldr	r4, [r3, #0]
  400a60:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400a64:	2b00      	cmp	r3, #0
  400a66:	d03e      	beq.n	400ae6 <__register_exitproc+0x9e>
  400a68:	685a      	ldr	r2, [r3, #4]
  400a6a:	2a1f      	cmp	r2, #31
  400a6c:	dc1c      	bgt.n	400aa8 <__register_exitproc+0x60>
  400a6e:	f102 0e01 	add.w	lr, r2, #1
  400a72:	b176      	cbz	r6, 400a92 <__register_exitproc+0x4a>
  400a74:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400a78:	2401      	movs	r4, #1
  400a7a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400a7e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400a82:	4094      	lsls	r4, r2
  400a84:	4320      	orrs	r0, r4
  400a86:	2e02      	cmp	r6, #2
  400a88:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400a8c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400a90:	d023      	beq.n	400ada <__register_exitproc+0x92>
  400a92:	3202      	adds	r2, #2
  400a94:	f8c3 e004 	str.w	lr, [r3, #4]
  400a98:	6828      	ldr	r0, [r5, #0]
  400a9a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400a9e:	f7ff ffd1 	bl	400a44 <__retarget_lock_release_recursive>
  400aa2:	2000      	movs	r0, #0
  400aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400aa8:	4b17      	ldr	r3, [pc, #92]	; (400b08 <__register_exitproc+0xc0>)
  400aaa:	b30b      	cbz	r3, 400af0 <__register_exitproc+0xa8>
  400aac:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400ab0:	f3af 8000 	nop.w
  400ab4:	4603      	mov	r3, r0
  400ab6:	b1d8      	cbz	r0, 400af0 <__register_exitproc+0xa8>
  400ab8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400abc:	6002      	str	r2, [r0, #0]
  400abe:	2100      	movs	r1, #0
  400ac0:	6041      	str	r1, [r0, #4]
  400ac2:	460a      	mov	r2, r1
  400ac4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400ac8:	f04f 0e01 	mov.w	lr, #1
  400acc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400ad0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400ad4:	2e00      	cmp	r6, #0
  400ad6:	d0dc      	beq.n	400a92 <__register_exitproc+0x4a>
  400ad8:	e7cc      	b.n	400a74 <__register_exitproc+0x2c>
  400ada:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400ade:	430c      	orrs	r4, r1
  400ae0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400ae4:	e7d5      	b.n	400a92 <__register_exitproc+0x4a>
  400ae6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400aea:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400aee:	e7bb      	b.n	400a68 <__register_exitproc+0x20>
  400af0:	6828      	ldr	r0, [r5, #0]
  400af2:	f7ff ffa7 	bl	400a44 <__retarget_lock_release_recursive>
  400af6:	f04f 30ff 	mov.w	r0, #4294967295
  400afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400afe:	bf00      	nop
  400b00:	20000430 	.word	0x20000430
  400b04:	00400b0c 	.word	0x00400b0c
  400b08:	00000000 	.word	0x00000000

00400b0c <_global_impure_ptr>:
  400b0c:	20000008                                ... 

00400b10 <_init>:
  400b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b12:	bf00      	nop
  400b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400b16:	bc08      	pop	{r3}
  400b18:	469e      	mov	lr, r3
  400b1a:	4770      	bx	lr

00400b1c <__init_array_start>:
  400b1c:	004009ed 	.word	0x004009ed

00400b20 <__frame_dummy_init_array_entry>:
  400b20:	004000f1                                ..@.

00400b24 <_fini>:
  400b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b26:	bf00      	nop
  400b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400b2a:	bc08      	pop	{r3}
  400b2c:	469e      	mov	lr, r3
  400b2e:	4770      	bx	lr

00400b30 <__fini_array_start>:
  400b30:	004000cd 	.word	0x004000cd
